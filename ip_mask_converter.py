bits_dict = {
    0: 128,
    1: 64,
    2: 32,
    3: 16,
    4: 8,
    5: 4,
    6: 2,
    7: 1
}


def mask_to_normal(prefix_mask):
    """
    Converts a mask in /x format to x.x.x.x format.

    Args:
      prefix_mask: The mask in /x format.

    Returns:
      The mask in x.x.x.x format.
    """
    mask = int(prefix_mask[1:])

    if mask > 32:
        print('prefix mask can"t be more than 32 .... O_O')
        return

    bit_mask = ''
    bit_mask_list = []
    mask_list = []

    # create bit mask like 111111111111100000...
    for i in range(32):
        if i < mask:
            bit_mask = bit_mask[:i] + str(1)
        else:
            bit_mask = bit_mask[:i] + str(0)

    # make list for
    for i in range(0, 32, 8):
        end = i+8
        bit_mask_list.append(bit_mask[i:end])

    for elem in bit_mask_list:
        sum = 0

        for i in range(7, -1, -1):
            if elem[i] == '1':
                sum += bits_dict[int(i)]
            else:
                pass

        mask_list.append(sum)

    print(f'aaaaand the result == {mask_list}')


def mask_to_prefix(mask):
    """
    Converts a mask in x.x.x.x format to /x format.
    (Generated by Bard)

    Args:
      mask: The mask in x.x.x.x format.

    Returns:
      The mask in /x format.
    """

    octets = mask.split(".")
    # For each octet, the function converts it to a binary string with a width of 8 bits using the "{0:08b}".format(int(octet)) format string.
    # The function joins all the binary strings together to create a single binary string.
    binary_mask = "".join(["{0:08b}".format(int(octet)) for octet in octets])
    prefix_length = len(binary_mask.rstrip("0"))
    print(f"/{prefix_length}")


print('type mask in format /x or x.x.x.x')
input_mask = input()

if '/' in input_mask:
    mask_to_normal(input_mask)
elif '.' in input_mask:
    mask_to_prefix(input_mask)
else:
    print('you need to check how to write mask))')
