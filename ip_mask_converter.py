bits_dict = {
    0: 128,
    1: 64,
    2: 32,
    3: 16,
    4: 8,
    5: 4,
    6: 2,
    7: 1
}


def create_binary_mask(mask):
    bit_mask = ''

    if '/' in input_mask:

        if int(mask[1:]) > 32:
            print('prefix mask can"t be more than 32 .... O_O')
            return

        for i in range(32):
            if i < int(mask[1:]):
                bit_mask = bit_mask[:i] + str(1)
            else:
                bit_mask = bit_mask[:i] + str(0)
    elif '.' in input_mask:
        octets = mask.split(".")
        # For each octet, the function converts it to a binary string with a width of 8 bits using the "{0:08b}".format(int(octet)) format string.
        # The function joins all the binary strings together to create a single binary string.
        bit_mask = "".join(["{0:08b}".format(int(octet)) for octet in octets])
    elif input_mask[0] == '0' and input_mask[1] == 'x':
        bit_mask = bin(int(mask[2:], 16))
        return bit_mask[2:]

    return bit_mask


def binary_mask_to_normal(mask):
    """
    Converts a mask in /x format to x.x.x.x format.

    Args:
      prefix_mask: The mask in /x format.

    Returns:
      The mask in x.x.x.x format.
    """

    bit_mask = create_binary_mask(mask)
    bit_mask_list = []
    mask_list = []

    # make list for
    for i in range(0, 32, 8):
        end = i+8
        bit_mask_list.append(bit_mask[i:end])

    for elem in bit_mask_list:
        sum = 0

        for i in range(7, -1, -1):
            if elem[i] == '1':
                sum += bits_dict[int(i)]
            else:
                pass

        mask_list.append(sum)

    return mask_list


def binary_mask_to_prefix(mask):
    """
    Converts a mask in x.x.x.x format to /x format.
    (Generated by Bard)

    Args:
      mask: The mask in x.x.x.x format.

    Returns:
      The mask in /x format.
    """

    binary_mask = create_binary_mask(mask)
    prefix_length = len(binary_mask.rstrip("0"))
    return (f"/{prefix_length}")


def hex_mask_to_other(hex_mask):
    bin_mask = create_binary_mask(hex_mask)
    normal_mask = binary_mask_to_normal(hex_mask)
    prefix_mask = binary_mask_to_prefix(hex_mask)

    print(f'Binary mask == {bin_mask[2:]}')
    print(f'Normal mask == {normal_mask}')
    print(f'Prefix mask == {prefix_mask}')


print('type mask in format /x or x.x.x.x or hexadecimal format')
input_mask = input()

if '/' in input_mask:
    bin_mask = create_binary_mask(input_mask)
    normal_mask = binary_mask_to_normal(input_mask)

    print(f'Binary mask == {bin_mask}')
    print(f'Normal mask == {normal_mask}')
elif '.' in input_mask:
    bin_mask = create_binary_mask(input_mask)
    prefix_mask = binary_mask_to_prefix(input_mask)

    print(f'Binary mask == {bin_mask}')
    print(f'Prefix mask == {prefix_mask}')
elif input_mask[0] == '0' and input_mask[1] == 'x':
    hex_mask_to_other(input_mask)
else:
    print('you need to check how to write mask))')
